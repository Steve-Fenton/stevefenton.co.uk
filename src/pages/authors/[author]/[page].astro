---
// warning: This file is overwritten by Astro Accelerator

// For listing all articles in this folder
import { Translations, Lang } from '@util/Languages';
import type { Page, MarkdownInstance } from 'astro';
import { Frontmatter, SITE } from '@config';
import { getPageLinks } from '@util/PageLinks';
import { isListable, sortByPubDateDesc } from '@util/PageTypeFilters';
import { getItem, setItem } from '@util/Cache';
import { getAuthorInfo } from '@util/PageQueries';
import Default from '@layouts/Default.astro';
import ArticleList from '@components/ArticleList.astro';
import Paging from '@components/Paging.astro';

const lang = SITE.default.lang;
const currentUrl = new URL(Astro.request.url);
const slug = currentUrl.pathname.split('/')[2];

let authorInfo = await getAuthorInfo(slug);

const frontmatter = authorInfo.frontmatter as Frontmatter;

// Props
type Props = {
  page: Page<MarkdownInstance<Record<string, any>>>;
  headings: { depth: number; slug: string; text: string; }[];
  pubDate: Date;
};
const { page, headings, pubDate } = Astro.props as Props;

frontmatter.pubDate = pubDate;

// Language
const _ = Lang(lang);

// Logic
type CacheData = {
  posts: MarkdownInstance<Record<string, any>>[];
  authors: string[];
}

export async function getCacheData() {
  const key = 'pages_authors_[author]_[page]';

  let cacheData: CacheData = await getItem(key);

  if (cacheData == null) {
    const sourcePosts = await Astro.glob('../../**/*.md');
    
    cacheData = { posts: [], authors: []};

    cacheData.posts = sourcePosts
      .filter(isListable)
      .sort(sortByPubDateDesc);

    cacheData.posts.forEach(p => {
      const auths: string[] = p.frontmatter.authors ?? [];
      if (auths.length == 0) {
        console.log('No authors found', p.url);
      }
      auths.forEach(a => {
        if (!cacheData.authors.includes(a)) {
          cacheData.authors.push(a);
        }
      });
    });
    
    await setItem(key, cacheData);
  }

  return cacheData;
}

export async function getStaticPaths({ paginate }: any) {
  let data = await getCacheData();

  return data.authors.map(a => {
    const filtered = data.posts.filter(p => {
      const auths: string[] = p.frontmatter.authors ?? [];
      return auths.includes(a);
    });
    return paginate(filtered, { 
        params: { author: a.toLowerCase() },
        props: { pubDate: filtered[0].frontmatter.pubDate },
        pageSize: SITE.pageSize 
    });
  }).flat();
}

// Page Links
const pageLinks = getPageLinks(SITE.pageLinks, page.lastPage, page.currentPage, page.url.current);
---
<Default frontmatter={ frontmatter } headings={ headings }>
  <h2>{ _(Translations.articles.page_title).replace('{n}', page.currentPage.toString())}</h2>
  <ArticleList lang={ lang } posts={ page.data } />
  <Paging lang={ lang } page={ page } pageLinks={ pageLinks } />
</Default>