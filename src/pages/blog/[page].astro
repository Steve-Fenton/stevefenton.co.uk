---
// warning: This file is overwritten by Astro Accelerator

// For listing all articles in this folder
import t from '@util/language.json';
import { Lang } from '@util/Languages';

import type { Page, MarkdownInstance } from 'astro';

import { Frontmatter, SITE } from '@config';
import { getPageLinks } from '@util/PageLinks';
import { isListable, sortByPubDateDesc } from '@util/PageTypeFilters';
import { getItem, setItem } from '@util/Cache';

import Default from 'src/layouts/Default.astro';
import ArticleList from '@components/ArticleList.astro';
import Paging from '@components/Paging.astro';

const lang = SITE.default.lang;

// Props
type Props = {
  page: Page<MarkdownInstance<Record<string, any>>>;
  headings: { depth: number; slug: string; text: string; }[];
  pubDate: Date;
};
const { page, headings, pubDate } = Astro.props as Props;

const frontmatter: Frontmatter = {
  layout: 'src/layouts/Default.astro',
  title: 'Articles',
  keywords: 'articles,astro,accelerator',
  description: 'Astro Accelerator articles.',
  pubDate: pubDate,
  robots: 'noindex, follow'
};

// Language
const _ = Lang(lang);

// Logic
type CacheData = {
  posts: MarkdownInstance<Record<string, any>>[];
}

export async function getCacheData() {
  const key = 'pages_articles_[page]';

  let cacheData: CacheData = await getItem(key);

  if (cacheData == null) {
    // This uses a relative glob, so we only look in the current collection
    const sourcePosts = await Astro.glob('./**/*.md');
    
    cacheData = { posts: []};

    cacheData.posts = sourcePosts
      .filter(isListable)
      .sort(sortByPubDateDesc);
    
    await setItem(key, cacheData);
  }

  return cacheData;
}

export async function getStaticPaths({ paginate }: any) {
  let data = await getCacheData();
  return paginate(data.posts, {
    props: { pubDate: data.posts[0].frontmatter.pubDate },
    pageSize: SITE.pageSize
  });
}

// Page Links
const pageLinks = getPageLinks(SITE.pageLinks, page.lastPage, page.currentPage, page.url.current);
---
<Default frontmatter={ frontmatter } headings={ headings }>
  <h2>Page {page.currentPage}</h2>
  <ArticleList lang={ lang } posts={ page.data } />
  <Paging lang={ lang } page={ page } pageLinks={ pageLinks } />
</Default>