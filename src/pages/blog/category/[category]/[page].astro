---
// For listing by frontmatter.categories
import t from '@util/language.json';
import { Lang } from '@util/Languages.astro';

import type { Page, MarkdownInstance } from 'astro';

import { Frontmatter, SITE } from '@config';
import { getPageLinks } from '@util/PageLinks.astro';
import { sortByPubDateDesc } from '@util/PageTypeFilters.astro';

import Default from '@layouts/Default.astro';
import ArticleList from '@components/ArticleList.astro';
import Paging from '@components/Paging.astro';

const lang = SITE.default.lang;
const currentUrl = new URL(Astro.request.url);
const slug = currentUrl.pathname.split('/')[3];
const title = slug.charAt(0).toUpperCase() + slug.slice(1);

const frontmatter: Frontmatter = {
  layout: 'src/layouts/Default.astro',
  title: title,
  pubDate: new Date(2022, 9, 17),
  keywords: `${slug},articles,astro,accelerator`,
  description: `Astro Accelerator ${slug} articles.`,
};

// Props
type Props = {
  page: Page<MarkdownInstance<Record<string, any>>>;
  headings: { depth: number; slug: string; text: string; }[];
};
const { page, headings } = Astro.props as Props;

// Language
const _ = Lang(lang);

// Logic
export async function getStaticPaths({ paginate }: any) {
  const sourcePosts = await Astro.glob('../../**/*.md');
  const urlPosts = sourcePosts
    .filter(p => p.url != null && p.url != '')
    .sort(sortByPubDateDesc);

  const categories: string[] = [];
  urlPosts.forEach(p => {
    const cats: string[] = p.frontmatter.categories ?? [];
    if (cats.length == 0) {
      console.log('No categories found', p.url);
    }
    cats.forEach(c => {
      if (!categories.includes(c)) {
        categories.push(c);
      }
    });
  });

  return categories.map(c => {
    const filtered = urlPosts.filter(p => {
      const cats: string[] = p.frontmatter.categories ?? [];
      return cats.includes(c);
    });
    return paginate(filtered, { params: { category: c.toLowerCase() }, pageSize: SITE.pageSize })
  });
}

// Page Links
const pageLinks = getPageLinks(SITE.pageLinks, page.lastPage, page.currentPage, page.url.current);
---
<Default frontmatter={ frontmatter } headings={ headings }>
  <h2>Page {page.currentPage}</h2>
  <ArticleList lang={ lang } posts={ page.data } />
  <Paging lang={ lang } page={ page } pageLinks={ pageLinks } />
</Default>