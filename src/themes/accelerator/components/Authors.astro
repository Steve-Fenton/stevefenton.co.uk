---
import { SITE, Frontmatter } from '@config';
import { Translations, Lang } from '@util/Languages';
import { formatDate, formatModifiedDate } from '@util/DateFormat';
import { getAuthorList } from '@util/Authors';
import { addSlashToAddress } from '@util/Url';
import { getImageInfo } from '@util/custom-markdown.mjs';

// Properties
type Props = {
  lang: string;
  frontmatter: Frontmatter;
};
const { lang, frontmatter } = Astro.props as Props;

// Language
const _ = Lang(lang);

// Logic
const authorList = await getAuthorList(frontmatter);

const author = authorList.writers.slice(0, 1)[0];
const authorImage = authorList?.image?.src ? getImageInfo(authorList.image.src, 'author-image', SITE.images.authorSize) : null;
const contributors = authorList.writers.slice(1);
---
{authorList.writers.length > 0 && 
<div class="post-meta">
  {authorImage && 
  <img
    srcset={ authorImage.srcset }
    sizes={ authorImage.sizes }
    src={ authorImage.src }
    alt={ authorList?.image?.alt }
    class={ authorImage.class } />
  }
  <div class="author-info">
    <span>{ _(Translations.post.written_by) }
      {author &&
        <a href={ addSlashToAddress(author.url) + '1/' } itemprop="author">{ author.frontmatter.title }</a>
      }{contributors.map((writer) => (
        <a href={ addSlashToAddress(writer.url) + '1/' } itemprop="contributor">{ writer.frontmatter.title }</a>
      ))}.
      <br /><time datetime={ frontmatter.pubDate.toString() } itemprop="datePublished">
      { formatDate(frontmatter, lang, SITE) }
      </time>
      {frontmatter.modDate &&
      <br /><time datetime={ frontmatter.modDate.toString() } itemprop="dateModified">
        { _(Translations.post.last_modified) } { formatModifiedDate(frontmatter, lang, SITE) }
      </time>
      }
    </span>
  </div>
</div>
}