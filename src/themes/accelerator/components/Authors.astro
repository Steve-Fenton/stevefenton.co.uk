---
import { PostQueries, DateFormatter, UrlFormatter } from 'astro-accelerator-utils';
import { SITE, Frontmatter } from '@config';
import { Translations, Lang } from '@util/Languages';
import { getImageInfo } from '@util/custom-markdown.mjs';

// Properties
type Props = {
  lang: string;
  frontmatter: Frontmatter;
};
const { lang, frontmatter } = Astro.props as Props;

// Language
const _ = Lang(lang);

// Logic
const dateFormatter = new DateFormatter(SITE.dateOptions);
const urlFormatter = new UrlFormatter(SITE.url);
const authorList = await PostQueries.getAuthors(frontmatter);

// Get image info
const authorImage = authorList?.image?.src 
  ? getImageInfo(authorList.image.src, 'author-image', SITE.images.authorSize)
  : null;
---
{authorList.writers.length > 0 && 
<div class="post-meta">
  {authorImage && 
  <img
    srcset={ authorImage.srcset }
    sizes={ authorImage.sizes }
    src={ authorImage.src }
    alt={ authorList?.image?.alt }
    class={ authorImage.class } />
  }
  <div class="author-info">
    <span>{ _(Translations.post.written_by) }
      {authorList.mainAuthor &&
        <a href={ urlFormatter.addSlashToAddress(authorList.mainAuthor.url) + '1/' } itemprop="author">{ authorList.mainAuthor.frontmatter.title }</a>
      }{authorList.contributors.map((writer) => (
        <a href={ urlFormatter.addSlashToAddress(writer.url) + '1/' } itemprop="contributor">{ writer.frontmatter.title }</a>
      ))}.
      <br /><time datetime={ frontmatter.pubDate.toString() } itemprop="datePublished">
      { dateFormatter.formatDate(frontmatter.pubDate, lang) }
      </time>
      {frontmatter.modDate &&
      <br /><time datetime={ frontmatter.modDate.toString() } itemprop="dateModified">
        { _(Translations.post.last_modified) } { dateFormatter.formatDate(frontmatter.modDate, lang) }
      </time>
      }
    </span>
  </div>
</div>
}