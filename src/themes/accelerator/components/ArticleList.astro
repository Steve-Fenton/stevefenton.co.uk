---
import type { Frontmatter } from '@config';
import type { MarkdownInstance } from 'astro';

import t from '@util/language.json';
import { Lang } from '@util/Languages';
import { addSlashToAddress } from '@util/Url';
import { getImageInfo } from '@util/custom-markdown.mjs';

import AuthorsMini from '@components/AuthorsMini.astro';

import { SITE } from '@config';

// Properties
type Props = {
  lang: string;
  posts: MarkdownInstance<Record<string, any>>[]
};
const { lang, posts } = Astro.props as Props;

// Language
const _ = Lang(lang);

// Logic
const articles = posts.map(p => {
  return {
    url: p.url,
    frontmatter: p.frontmatter,
    img: p.frontmatter.bannerImage
      ? getImageInfo(p.frontmatter.bannerImage.src, '', SITE.images.listerSize)
      : null
  };
});

let articleIndex = 0;
function getLoadingAttribute() {
  articleIndex++;
  return articleIndex > 2
    ? 'lazy'
    : 'eager';
}
---
<ul class="post-list anim-show-parent">
  {articles.map((post) => (
  <li class="list-item" data-destination={ addSlashToAddress(post.url) } data-image={ (post.frontmatter.bannerImage?.src.length > 0).toString() }>
    <article>
      <div class="list-item-image">
      {post.img && (
        <img
          srcset={ post.img.srcset }
          sizes={ post.img.sizes }
          src={ post.img.src }
          alt={ post.frontmatter.bannerImage.alt }
          class={ post.img.class }
          loading={ getLoadingAttribute() } />
      )}
      </div>
      <div class="list-item-content">
        <h3>
          <a href={ addSlashToAddress(post.url) }>{ post.frontmatter.title }</a>
        </h3>
        <AuthorsMini lang={ lang } frontmatter={ post.frontmatter as Frontmatter } />
      </div>
    </article>
  </li>
  ))}
</ul>