---
import type { MarkdownInstance } from 'astro';
import { SITE, Frontmatter } from '@config';
import { addSlashToAddress } from 'astro-accelerator-utils';
import { getImageInfo } from '@util/custom-markdown.mjs';
import { getTextFrom } from '@util/Markdown';
import AuthorsMini from '@components/AuthorsMini.astro';


// Properties
type Props = {
  lang: string;
  posts: MarkdownInstance<Record<string, any>>[]
};
const { lang, posts } = Astro.props as Props;

// Logic
type ImageInfo = {
  src: string;
  srcset: string;
  sizes: string;
  class: string;
};

type Article = {
  url: string;
  frontmatter: Record<string, any>;
  img: ImageInfo | null;
};


const articles: Article[] = [];

for (let p of posts) {
  const item = {
    url: p.url ?? '',
    frontmatter: p.frontmatter,
    img: p.frontmatter.bannerImage
    ? getImageInfo(p.frontmatter.bannerImage.src, '', SITE.images.listerSize)
    : null
  };
  
  item.frontmatter.title = await getTextFrom(p.frontmatter.title);

  articles.push(item)
}

let articleIndex = 0;
function getLoadingAttribute() {
  articleIndex++;
  return articleIndex > 2
    ? 'lazy'
    : 'eager';
}
---
<ul class="post-list anim-show-parent">
  {articles.map((post) => (
  <li class="list-item" data-destination={ addSlashToAddress(post.url, SITE) } data-image={ (post.frontmatter.bannerImage?.src.length > 0).toString() }>
    <article>
      <div class="list-item-image">
      {post.img && (
        <img
          srcset={ post.img.srcset }
          sizes={ post.img.sizes }
          src={ post.img.src }
          alt={ post.frontmatter.bannerImage.alt }
          class={ post.img.class }
          loading={ getLoadingAttribute() } />
      )}
      </div>
      <div class="list-item-content">
        <h3>
          <a href={ addSlashToAddress(post.url, SITE) }>{ post.frontmatter.title }</a>
        </h3>
        <AuthorsMini lang={ lang } frontmatter={ post.frontmatter as Frontmatter } />
      </div>
    </article>
  </li>
  ))}
</ul>