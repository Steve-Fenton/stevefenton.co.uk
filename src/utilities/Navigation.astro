---
// Data file `navigation.ts`
import { menu } from '../navigation';

import { getItem, setItem } from '@util/Cache.astro';
import { showInMenu } from '@util/PageTypeFilters.astro';
import { mapNavPage, setCurrentPage } from '@util/NavPage.astro';
import { NavPage, isNavPage } from '@util/NavigationTypes.astro';
import { getTopLevelPages, getPages } from '@util/PageQueries.astro';

export async function getMenu (currentUrl: URL) {
    const setCurrent = (item: NavPage) => {
        item.isOpen = currentUrl.pathname.startsWith(item.url);
        item.ariaCurrent = item.url == currentUrl.pathname ? 'page' : false;
        item.children.forEach(setCurrent);
    }

    let pages: NavPage[] = []

    for (let i = 0; i < menu.length; i++) {
        const item = menu[i];
        if (isNavPage(item)) {
            setCurrent(item);
            pages.push(item);
        } else {
            const p = await getNavigation(currentUrl);
            for (let j = 0; j < p.length; j++) {
                pages.push(p[j]);
            }
        }
    }

    return pages;
}

export async function getNavigation (currentUrl: URL) {

    const key = 'Navigation__getNavigation';
    let pageHierarchy: NavPage[] = await getItem(key);

    if (pageHierarchy == null) {
        const topLevelPages = await getTopLevelPages(showInMenu);
        const allPages = await getPages(showInMenu);

        pageHierarchy = topLevelPages.map(mapNavPage);
        const pageList: NavPage[] = allPages.map(mapNavPage);

        for (let i = 0; i < pageHierarchy.length; i++) {
            const page = pageHierarchy[i];
            page.children = pageList
                .filter((mp) =>
                    page.url != '/'
                    && mp.url != page.url
                    && mp.url.startsWith(page.url)
                )
                .sort((mp) => mp.order);

            if (page.children.length > 0) {
                const ownChild = structuredClone(page);
                ownChild.order = -1;
                ownChild.children = [];
                page.children.push(ownChild);
            }
        }

        // Cache the result
        await setItem(key, pageHierarchy);
    }

    setCurrentPage(pageHierarchy, currentUrl);

    return pageHierarchy;
}
---